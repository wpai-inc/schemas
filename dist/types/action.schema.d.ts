/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * An action is an object that can be executed in WordPress to perform a particular task according to its abilities. It is coupling of an ability with a data structure.
 */
export type Action = Action1 & Action2;
export type Action1 = BaseAction;
/**
 * The ability of the Action defines what it's able to do when executed by the WordPress client.
 */
export type Abilities = "run" | "message" | "navigate" | "query" | "code" | "write_to_input" | "write_to_editor";
export type Action2 = NavigateAction | RunAction | CodeAction | QueryAction | MessageAction | WriteToEditorAction;
export type NavigateAction = {
  ability: PerformsAStandardPageNavigationWithinWordPressUsingWindowLocation;
  /**
   * The URL to navigate to.
   */
  url: string;
  [k: string]: unknown;
};
export type PerformsAStandardPageNavigationWithinWordPressUsingWindowLocation = "navigate";
export type RunAction = {
  ability: RunsAWPCLICommandInTheWordPressInstallation;
  /**
   * The WP CLI command to run.
   */
  command: string;
  /**
   * Arguments for the command.
   */
  args?: string[];
  [k: string]: unknown;
};
export type RunsAWPCLICommandInTheWordPressInstallation = "run";
export type CodeAction = {
  ability: CodeToBeExecutedInTheWordPressEnvironment;
  /**
   * The absolute file path to the code.
   */
  file: string;
  [k: string]: unknown;
};
export type CodeToBeExecutedInTheWordPressEnvironment = "code";
export type QueryAction = {
  ability: QueriesTheWordPressDatabaseUsing$WpdbGlobalAndAPreparedStatement;
  /**
   * The SQL query to run with placeholders that will be replaced by the prepared arguments.
   */
  sql: string;
  /**
   * Arguments for the query, to be ran through `wpdb::prepare`.
   */
  args?: (string | number)[];
  visualization: Visualization;
  [k: string]: unknown;
};
export type QueriesTheWordPressDatabaseUsing$WpdbGlobalAndAPreparedStatement = "query";
/**
 * Types of visualizations for presenting data.
 */
export type Visualization = "conversational" | "bar-chart" | "line-chart" | "table" | "big-number-card" | "donut-chart";
export type SendsAMessageToTheAgentWPDialogInterfaceForTheUserToRespondTo = "message";
export type WritesTextToTheWordPressEditor = "write_to_editor";

export interface BaseAction {
  ability: Abilities;
  [k: string]: unknown;
}
export interface MessageAction {
  ability: SendsAMessageToTheAgentWPDialogInterfaceForTheUserToRespondTo;
  /**
   * The text of the message in markdown.
   */
  text: string;
  buttons?: {
    label: string;
    url: string;
    level?: "primary" | "secondary" | "danger" | "success";
    [k: string]: unknown;
  }[];
  graph?: Graph;
  escalation?: MessageActionEscalation;
  [k: string]: unknown;
}
export interface Graph {
  visualization: Visualization;
  title?: string;
  /**
   * @minItems 1
   */
  data: [
    {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[a-zA-Z0-9]+$".
       */
      [k: string]: string | number;
    },
    ...{
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[a-zA-Z0-9]+$".
       */
      [k: string]: string | number;
    }[]
  ];
  chart?: {
    xAxisKey: string;
    /**
     * An array of objects used to render the data rechart components
     *
     * @minItems 1
     */
    dataKeys: [
      {
        key: string;
        label: string;
        color: "#4991F7" | "#FF70A6" | "#1E1E1E";
        [k: string]: unknown;
      },
      ...{
        key: string;
        label: string;
        color: "#4991F7" | "#FF70A6" | "#1E1E1E";
        [k: string]: unknown;
      }[]
    ];
    /**
     * Used to abbreviate the tick label to a certain character length
     */
    xAxisTickAbbr?: number;
  };
  [k: string]: unknown;
}
export interface MessageActionEscalation {
  /**
   * The name of the escalation service to use.
   */
  service: "codeable";
  /**
   * The ID of the escalation.
   */
  id: string;
  /**
   * Name of the service. Usually contains an identifier.
   */
  name: string;
  /**
   * The headline of the escalation.
   */
  headline: string;
  /**
   * The description of the escalation.
   */
  description: string;
  /**
   * The link to the escalation.
   */
  link?: string;
  [k: string]: unknown;
}
export interface WriteToEditorAction {
  ability: WritesTextToTheWordPressEditor;
  /**
   * The text to write to the editor using Gutenberg blocks.
   */
  text: string;
  [k: string]: unknown;
}
